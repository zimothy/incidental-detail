------------------------------------------------------------------------------
module Maya where

------------------------------------------------------------------------------
-- | Libraries
import Text.Printf

------------------------------------------------------------------------------
-- | Source
import Types


------------------------------------------------------------------------------
-- | Polygon types
cuboid     = "polyCube"
sphere     = "polySphere"
cylinder   = "polyCylinder"
type Poly = (String, String, Transform)
type PolySet = [Poly]

------------------------------------------------------------------------------
-- | Translate the given node to the given position
translate :: Point -> String -> [String]
translate p n = [cmd]
    where cmd = printf "cmds.move(%2.2f, %2.2f, %2.2f, '%s')" (px p) (py p) (pz p) n

------------------------------------------------------------------------------
-- | Rotates the given node to the given orientation
rotate :: Point -> String -> [String]
rotate p n = [cmd]
    where cmd = printf "cmds.rotate(%2.2f, %2.2f, %2.2f, '%s')" (px p) (py p) (pz p) n

------------------------------------------------------------------------------
-- | Scales the given node by the given amount
scale :: Point -> String -> [String]
scale p n = [cmd]
    where cmd = printf "cmds.scale(%2.2f, %2.2f, %2.2f, '%s')" (px p) (py p) (pz p) n

------------------------------------------------------------------------------
-- | A named cube, translated to the given position
makePoly :: Poly -> [String]
makePoly (t, n, p) = makeCube ++ moveCube ++ rotCube ++ scaleCube
    where makeCube  = [printf "cmds.%s(n = '%s')" t n]
          moveCube  = translate (tt p) n
          rotCube   = rotate (tr p) n
          scaleCube = scale (ts p) n

------------------------------------------------------------------------------
-- | Concatenate commands to file string
concatCmds :: [String] -> String
concatCmds s = unlines (map (\s -> "    " ++ s) s)

------------------------------------------------------------------------------
-- | Makes a comment line filled with delimiters.
makeDelims :: String -> String
makeDelims d = "# " ++  concat (take 76 $ repeat d) ++ " #"

------------------------------------------------------------------------------
-- | Makes a command stack given a set of polygons.
polySetToCmds :: PolySet -> String
polySetToCmds ps = concatCmds $ concat (map makePoly ps)

----------------------------------------------------------------------------
-- | Writes start of file
preamble :: String -> String
preamble n = unlines [delims, printf "# %s, generated by IDG." n, delims, "", importMS, importMC, "", def]
    where delims   = makeDelims "-"
          importMS = "import maya.standalone"
          importMC = "import maya.cmds as cmds"
          def      = "def generate():"