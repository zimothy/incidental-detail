--------------------------------------------------------------------------------
-- | Incidental Detail, a library for generating details of the incidental kind.

module Maya where

-- | Standard
import Text.Printf

-- | Source
import Types
import Hastwix
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
-- | A named cube, translated to the given position
makePoly :: Polygon -> [String]
makePoly p = makeShape ++ setXForm
    where makeShape  = [printf "cmds.%s()" (pType p)]
          setXForm  = [printf "cmds.xform(m = %s)" (show (components (transpose (transform p))))]

--------------------------------------------------------------------------------
-- | Concatenate commands to file string
concatCmds :: [String] -> String
concatCmds s = unlines (map (\s -> "    " ++ s) s)

--------------------------------------------------------------------------------
-- | Makes a comment line filled with delimiters.
makeDelims :: String -> String
makeDelims d = "# " ++  concat (take 76 $ repeat d) ++ " #"

--------------------------------------------------------------------------------
-- | Makes a command stack given a set of polygons.
polySetToCmds :: [Polygon] -> String
polySetToCmds ps = concatCmds $ concat (map makePoly ps)

--------------------------------------------------------------------------------
-- | Writes start of file
preamble :: String -> String
preamble n = unlines [delims, printf "# %s, generated by IDG." n, delims, "", importMC, "", def]
    where delims   = makeDelims "-"
          importMC = "import maya.cmds as cmds"
          def      = "def generate():"

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------