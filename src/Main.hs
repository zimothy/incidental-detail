------------------------------------------------------------------------------
module Main
    ( main
    ) where

------------------------------------------------------------------------------
import Data.Matrix
import Data.Tree
import Text.Printf

------------------------------------------------------------------------------
import Graphics.DetailGen.Monad
import Graphics.DetailGen.Point
import Graphics.DetailGen.PointSelection
import Graphics.DetailGen.Vec3


------------------------------------------------------------------------------
-- | Writes the simple example to "basic.py".
main :: IO ()
main = do
    writeFile "basic.py" (preamble "Basic")
    unwrapTree (identity 4) 0 $ head (runDetailGen example)


------------------------------------------------------------------------------
-- | A simple example of the DSL.
example :: DetailGen ()
example = do
    detail Cylinder Centre 1
    (h, s) <- pureBranch [(0.7, 0.1), (0, 0.5), (-0.7, 0.1)]
    detail Cube (CylinderLoop 8 h) s
    detail Cylinder (CubeFaces yAxis) 0.5


------------------------------------------------------------------------------
makeDelims :: String -> String
makeDelims d = "# " ++  concat (replicate 76 d) ++ " #"


------------------------------------------------------------------------------
preamble :: String -> String
preamble n = unlines [delims, comment, delims, "", importMC, "", def]
    where delims   = makeDelims "-"
          comment  = printf "# %s, generated by IDG." n
          importMC = "import maya.cmds as cmds"
          def      = "def generate():"


------------------------------------------------------------------------------
cmdFromShape :: Shape -> String
cmdFromShape Cube     = "cmds.polyCube(w=2, h=2, d=2)"
cmdFromShape Cylinder = "cmds.polyCylinder(r=1, h=2)"


------------------------------------------------------------------------------
mtxToPoint :: Matrix Double -> (Double, Double, Double)
mtxToPoint m = (x, y, z)
    where x = getElem 1 1 m
          y = getElem 2 1 m
          z = getElem 3 1 m


------------------------------------------------------------------------------
dotMtxVec :: Matrix Double -> Vec3 -> Vec3
dotMtxVec m (x, y, z) = mtxToPoint p
    where p = m * fromList 4 1 [x, y, z, 1]


------------------------------------------------------------------------------
formMatrix :: Point -> Vec3 -> Matrix Double
formMatrix p gScale = t * r * s
    where t = translate loc
          r = rotBetween (1, 0, 0) up
          s = scale gScale
          loc = location p
          up  = upVector p


------------------------------------------------------------------------------
expand :: Int -> Detail -> Forest Detail -> Matrix Double -> Vec3 -> Point -> IO ()
expand l label sub pMtx gScale p = do
    --print $ show p
    let newM = pMtx * formMatrix p gScale
        newMScale = scale (1, 1, 1) * newM
    appendFile "basic.py" $ printf "    %s\n" (cmdFromShape (detailShape label))
    appendFile "basic.py" $ printf "    cmds.xform(m = %s)\n" $ show (mtxToArr4 (transpose newMScale))
    mapM_ (unwrapTree newM (l + 1)) sub


------------------------------------------------------------------------------
unwrapTree :: Matrix Double -> Int -> Tree Detail -> IO ()
unwrapTree m l x = do
    let root     = rootLabel x
        children = subForest x
        points   = toPoints $ detailSelection root
        dScale   = detailScale root
    mapM_ (expand l root children m (dScale, dScale, dScale)) points

